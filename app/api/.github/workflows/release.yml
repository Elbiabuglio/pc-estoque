# .github/workflows/release.yml

name: CI/CD para Release em Tags

# ----------------------------------------------------
# GATILHO (TRIGGER)
# ----------------------------------------------------
# Este workflow irá rodar SOMENTE quando uma nova tag
# no formato 'v*.*.*' (ex: v1.0.0, v1.2.3) for criada.
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-test-and-publish:
    name: Build, Testa e Publica a Imagem
    runs-on: ubuntu-latest # O pipeline rodará em uma máquina virtual Linux (Ubuntu)

    steps:
      # ----------------------------------------------------
      # ETAPA 1: PREPARAÇÃO DO AMBIENTE
      # ----------------------------------------------------
      - name: 1. Checkout do código
        uses: actions/checkout@v4
        # Baixa o código do seu repositório para a máquina virtual

      - name: 2. Configurar Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # Instala a versão especificada do Python

      - name: 3. Instalar dependências e cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # Onde o cache do pip é armazenado
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/base.txt', '**/requirements/develop.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
        # O cache acelera o build guardando as dependências já baixadas

      - name: Instalar requirements.txt
        run: pip install -r requirements/develop.txt
        # Instala as bibliotecas listadas no requirements.txt

      # ----------------------------------------------------
      # ETAPA 2: LINT E TESTES
      # ----------------------------------------------------
      - name: 4. Verificar lint
        run: |
          isort -c app ./tests
          bandit -c pyproject.toml -r -f custom app ./tests
          black --check app ./tests
          flake8 --max-line-length=120 app ./tests
        # Verifica a qualidade e formatação do código. O pipeline falhará se houver erros.

      - name: 5. Testes com Pytest e Cobertura
        run: pytest --cov=app --cov-report=term-missing --cov-report=xml ./tests/ --cov-fail-under=90 --durations=5
        # Roda os testes e exibe um relatório de cobertura no console.

      # ----------------------------------------------------
      # ETAPA 3: BUILD E PUSH DA IMAGEM DOCKER
      # ----------------------------------------------------
      - name: 6. Login no GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Nome do usuário ou organização do GitHub
          password: ${{ secrets.GITHUB_TOKEN }}
          # Usa um token temporário e seguro gerado pelo GitHub Actions

      - name: 7. Extrair metadados da imagem Docker (tags e labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # Gera tags para a imagem Docker baseadas na tag do Git.
          # Ex: se a tag do Git é v1.2.3, a imagem será ghcr.io/seu-usuario/seu-repo:1.2.3

      - name: 8. Build e Push da imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Constrói a imagem a partir do seu Dockerfile e a envia para o GHCR
          # usando as tags geradas na etapa anterior.